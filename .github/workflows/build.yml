name: Create and publish a Docker image
on:
  push:
    branches: ["development"]
# Configures this workflow to run every time a change is pushed to the branch called release.

env:
  REGISTRY: gcr.io
  IMAGE_NAME: fantasyfootball-service
  PROJECT_ID: fantasyfootball-service
  GKE_CLUSTER: football-cluster # Add your cluster name here.
  GKE_ZONE: europe-west1 # Add your cluster zone here.
  DEPLOYMENT_NAME: fantasy-football-service # Add your deployment name here.
  IMAGE: fantasyfootball-service

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.

jobs:
  # This workflow contains a single job called "build"
  deploy:
    name: deploy to gke
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"markvdkort_s6-fantasyfootballservice" /o:"markvdkort" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # Runs a single command using the runners shell
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Deploy database
        run: kubectl apply -f ./deployment/database.yaml

      # Deploy the Docker image to the GKE cluster
      - name: Deploy service
        run: kubectl apply -f ./deployment/deployment.yaml

      - name: Deploy gateway
        run: kubectl apply -f ./deployment/gateway.yaml
