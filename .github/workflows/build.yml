name: Create and publish a Docker image
on:
  push:
    branches: ["development"]
# Configures this workflow to run every time a change is pushed to the branch called release.

env:
  REGISTRY: gcr.io
  IMAGE_NAME: fantasyfootball-service
  PROJECT_ID: fantasyfootball-service
  GKE_CLUSTER: fantasyfootball-cluster-stable
  GKE_ZONE: europe-west1
  DEPLOYMENT_NAME: fantasy-football-service
  IMAGE: fantasyfootball-service

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.

jobs:
  # This workflow contains a single job called "build"
  deploy:
    name: deploy to gke
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Set up PHP
      #   uses: shivammathur/setup-php@v2
      #   with:
      #     php-version: "8.1" # specify your PHP version
      #     extensions: mbstring, intl, bcmath, gd, zip

      # - name: Install Composer dependencies
      #   run: composer install --ignore-platform-reqs

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: "17"
      #     distribution: "temurin"

      # - name: Install SonarScanner
      #   run: |
      #     mkdir -p .sonar/scanner
      #     curl -sSLo .sonar/scanner/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.0.0.4432-linux.zip
      #     unzip -o .sonar/scanner/sonar-scanner-cli.zip -d .sonar/scanner
      #     export PATH="$PATH:$(pwd)/.sonar/scanner/sonar-scanner-6.0.0.4432-linux/bin"

      # - name: Run SonarScanner
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     .sonar/scanner/sonar-scanner-6.0.0.4432-linux/bin/sonar-scanner \
      #       -Dsonar.projectKey=MarkvdKort_s6-fantasyfootballservice \
      #       -Dsonar.organization=markvdkort \
      #       -Dsonar.sources=. \
      #       -Dsonar.host.url=https://sonarcloud.io \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Runs a single command using the runners shell
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Deploy database
        run: kubectl apply -f ./deployment/database.yaml

      # Deploy the Docker image to the GKE cluster
      - name: Deploy service
        run: kubectl apply -f ./deployment/deployment.yaml

      - name: Deploy gateway
        run: kubectl apply -f ./deployment/gateway.yaml
